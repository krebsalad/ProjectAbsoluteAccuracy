#!/usr/bin/env python

import os
import subprocess
import re
import sys
import glob
import getpass


# error messages
log = []

def print_log():
    if not log:
        print("No entries in script log found.")
    else:
        for entry in log:
            print(entry)


def print_help():
    print("\nThis script will only work if your package was generated using urdfMaker.py. You MUST run this script with a path to your package folder")
    print("\ntype the path of the robot package right after the script name. The script is reusable on the same package or different package in same project as long as the package was generated with urdfMaker.py")


# get parameter with path to config
if(len(sys.argv) == 1):
    print("\nFAILED: no path given")
    print_help()
    exit()

config_file = sys.argv[1] + "sim_setup_config.txt"

if not (os.path.exists(config_file)):
    print("\nFAILED: could not find config file in directory:"+config_file+"\n Note: end your path with a '/'")
    print_help()
    exit()


# default params
project_name = "catkin_ws"
package_name = "robot_irb1600"
robot_name = "irb1600"
abb_meta_package = "abb_experimental"
irb_robot_name = "irb1600_6_12"
abb_support_package = "abb_irb1600_support"

# read configuration file
with open(config_file, 'r') as f:
    for line in f:
        line = str.format(line)
        line = re.sub("\n", "", line)
        if(re.match("project_name=", line)):
            project_name = re.sub("project_name=", "", line)
        if(re.match("package_name=", line)):
            package_name = re.sub("package_name=", "", line)
        if(re.match("robot_name=", line)):
            robot_name = re.sub("robot_name=", "", line)
        if(re.match("abb_meta_package=", line)):
            abb_meta_package = re.sub("abb_meta_package=", "", line)
        if(re.match("irb_robot_name=", line)):
            irb_robot_name = re.sub("irb_robot_name=", "", line)
        if(re.match("abb_support_package=", line)):
            abb_support_package = re.sub("abb_support_package=", "", line)
    f.close()

# paths
pth_base = "/home/"+getpass.getuser()+"/"
pth_project_workspace = pth_base+project_name+'/'
pth_robot_pkg = pth_project_workspace+"src/"+package_name+"/"
pth_ros_downloads = pth_base + "ROS_Downloads/"
pth_robot_support_pkg = pth_ros_downloads+abb_support_package

# add industrial package to source and build
if not (os.path.exists(pth_project_workspace+"/src/abb_driver")):
    subprocess.call(["cp", "-r", pth_ros_downloads+'abb/abb_driver', pth_project_workspace+"/src/"])
    subprocess.call(["sudo","cp", "-r", pth_ros_downloads+'/industrial_core/.', pth_project_workspace+"/src/"])
else:
    log.append("Did not move packages abb_drive and industrial_core to project source folder because already existing, if you want to redo this delete abb_driver package")

# remove dependecy tags generated by moveit
with open(pth_robot_pkg+"package.xml") as f:
    temp = open(pth_robot_pkg+"package_temp.xml", "w+")
    for line in f:
        line = re.sub("<build_depend>"+package_name+"</build_depend>", "", line)
        line = re.sub("<run_depend>"+package_name+"</run_depend>", "", line)
        temp.write(line)

    temp.close()
    f.close()
    subprocess.call(["cp", pth_robot_pkg+"package_temp.xml", pth_robot_pkg+"package.xml"])

# copy needed files to simulate! note probably does not yet work with robots with less or more than 6 joints: see following 3 lines
subprocess.call(["cp", pth_ros_downloads+"abb/abb_irb2400_moveit_config/launch/moveit_planning_execution.launch", pth_robot_pkg+"launch/"])
subprocess.call(["cp", pth_ros_downloads+"abb/abb_irb2400_moveit_config/launch/abb_irb2400_moveit_controller_manager.launch.xml", pth_robot_pkg+"launch/"+irb_robot_name+"_moveit_controller_manager.launch.xml"])
subprocess.call(["cp", pth_ros_downloads+"abb/abb_irb2400_moveit_config/config/controllers.yaml", pth_robot_pkg+"config/"])
subprocess.call(["cp", pth_ros_downloads+abb_meta_package+"/"+abb_support_package+"/config/joint_names_"+irb_robot_name+".yaml", pth_robot_pkg+"config/"])
subprocess.call(["cp", pth_ros_downloads+abb_meta_package+"/"+abb_support_package+"/launch/robot_interface_download_"+irb_robot_name+".launch", pth_robot_pkg+"launch/"])

# change paths to folder, some value and remove uneeded lines
with open(pth_robot_pkg+"launch/moveit_planning_execution.launch") as f:
    temp = open(pth_robot_pkg+"launch/temp_planning_execution.launch", "w+")
    for line in f:
        line = re.sub("abb_irb2400_support", package_name, line)
        line = re.sub('joint_names_.*?yaml', 'joint_names_'+irb_robot_name+".yaml", line)
        line = re.sub("abb_irb2400_moveit_config", package_name, line)
        line = re.sub("robot_interface_download_.*?launch", "robot_interface_download_"+irb_robot_name+".launch", line)
        temp.write(line)
    f.close()
    temp.close()
    subprocess.call(["cp", pth_robot_pkg+"launch/temp_planning_execution.launch", pth_robot_pkg+"launch/moveit_planning_execution.launch"])

with open(pth_robot_pkg+"launch/trajectory_execution.launch.xml") as f:
    subprocess.call(["rm", pth_robot_pkg+"launch/temp_planning_execution.launch"])
    temp = open(pth_robot_pkg+"launch/temp_planning_execution.launch", "w+")
    for line in f:
        line = re.sub('value="1.2"', 'value="10.0"', line)
        line = re.sub('launch/.*?_moveit_', 'launch/'+irb_robot_name+'_moveit_', line)
        temp.write(line)
    f.close()
    temp.close()
    subprocess.call(["cp", pth_robot_pkg+"launch/temp_planning_execution.launch", pth_robot_pkg+"launch/trajectory_execution.launch.xml"])

with open(pth_robot_pkg+"launch/"+irb_robot_name+"_moveit_controller_manager.launch.xml") as f:
    subprocess.call(["rm", pth_robot_pkg+"launch/temp_planning_execution.launch"])
    temp = open(pth_robot_pkg+"launch/temp_planning_execution.launch", "w+")
    for line in f:
        line = re.sub('abb_irb2400_moveit_config', package_name, line)
        temp.write(line)
    f.close()
    temp.close()
    subprocess.call(["cp", pth_robot_pkg+"launch/temp_planning_execution.launch", pth_robot_pkg+"launch/"+irb_robot_name+"_moveit_controller_manager.launch.xml"])

with open(pth_robot_pkg+"launch/robot_interface_download_"+irb_robot_name+".launch") as f:
    subprocess.call(["rm", pth_robot_pkg+"launch/temp_planning_execution.launch"])
    temp = open(pth_robot_pkg+"launch/temp_planning_execution.launch", "w+")
    for line in f:
        line = re.sub(abb_support_package, package_name, line)
        temp.write(line)
    f.close()
    temp.close()
    subprocess.call(["cp", pth_robot_pkg+"launch/temp_planning_execution.launch", pth_robot_pkg+"launch/robot_interface_download_"+irb_robot_name+".launch"])

subprocess.call(["rm", pth_robot_pkg+"launch/temp_planning_execution.launch"])

# build
subprocess.call(["catkin_make"], shell=True, cwd=pth_project_workspace)

print_log()
print("\nYou should now be able to run your moveit configuration on a actual robot using moveit_planning_execution.launch. Try command(options between < >): roslaunch "+package_name+" moveit_planning_execution.launch sim:=<false/true> robot_ip:=<ros_socket_ip on robot>")
exit()