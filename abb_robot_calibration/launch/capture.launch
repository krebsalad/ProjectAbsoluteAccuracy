<launch>

  <!-- utility arguments -->
  <arg name="rviz" default="false"/>                                          <!-- launch rviz to visualize your robot -->
  <arg name="robot_utility_launch" default="false"/>                          <!-- launch utility robot code node package. Generally used for moving in manual mode -->

  <!-- robot arguments -->
  <arg name="robot_ip" default="10.128.187.52"/>                              <!-- robot ip required in case of actual robot -->
  <arg name="robot_package" default="fieldlab_cel3_calib"/>                   <!-- robot package with calibration configuration -->
  <arg name="sim_launch" default="false"/>                                    <!-- launch robot_cal.launch in robot package launch dir or robot_cal_sim.launch -->

  <!-- capture arguments -->
  <arg name="manual" default="true"/>
  <arg name="capture_config_file_name" default="capture_with_multiple_cameras.yaml"/> <!-- name of capture configuration. Must be found in robot package/config -->
  <arg name="calibration_poses_bag" default="calibration_poses_multiple_cameras.bag"/> <!-- name of poses bag for auto calibration. Must be found in robot package / config -->
  <arg name="output_file_ext" default="fieldlab_cel3_calibration_output"/> <!-- files will have this extension, exmpl: calibrated_fieldlab_cel3_calibration_output.urdf -->
  <arg name="calibration_output_directory" default="calibration_multiple_cams"/> <!-- name of the output directory in the robot package -->

  <!-- path arguments -->
  <arg name="robot_package_path" value="(find $(arg robot_package))" />
  <arg name="dollar" value="$" />

  <!-- launch robot_cal.launch from robot package -->
  <group unless="$(arg sim_launch)">
    <include file="$(arg dollar)$(arg robot_package_path)/launch/robot_cal.launch">
      <arg name="robot_ip" value="$(arg robot_ip)"/>
      <arg name="rviz_planner" value="$(arg rviz)"/>
      <arg name="camera_launcher_arg" value="none"/>
    </include>
  </group>

  <!-- launch robot_cal_sim.launch from robot package -->
  <group if="$(arg sim_launch)">
    <include file="$(arg dollar)$(arg robot_package_path)/launch/robot_cal_sim.launch">
      <arg name="rviz_planner" value="$(arg rviz)"/>
      <arg name="camera_launcher_arg" value="none"/>
    </include>
  </group>

  <!-- create output dir -->
  <param name="mkdir_calibration_output" command="mkdir -m 777 -p $(arg robot_package_path)/$(arg calibration_output_directory)/abb_robot_calibration/" />

  <!-- launch in manual mode -->
  <group if="$(arg manual)">
    <rosparam command="delete" param="robot_calibration" />
    <node pkg="robot_calibration" type="calibrate" name="capture"
          args="--manual"
          output="screen" required="true" launch-prefix="xterm -e">
      <rosparam file="$(arg dollar)$(arg robot_package_path)/config/$(arg capture_config_file_name)" command="load"/>
    </node>
  </group>

  <!-- launch in automatic mode, calibration_poses.bag required in specific calibration package-->
  <group unless="$(arg manual)">
    <rosparam command="delete" param="robot_calibration" />
    <node pkg="robot_calibration" type="calibrate" name="capture"
          args="$(arg dollar)$(arg robot_package_path)/config/$(arg calibration_poses_bag)"
          output="screen" required="true" launch-prefix="xterm -e">
      <rosparam file="$(arg dollar)$(arg robot_package_path)/config/$(arg capture_config_file_name)" command="load" />
    </node>
  </group>

  <!-- write calibration data to bag file -->
  <node pkg="rosbag" type="record" name="calibration_bagger" output="screen"
        args="--bz2 -o $(arg dollar)$(arg robot_package_path)/$(arg calibration_output_directory)/abb_robot_calibration/calibration_data calibration_data robot_description" >
  </node>

  <!-- Set output param code / must equal to calibrate.launch-->
  <param name="robot_calibration_output_file_extension" type="str" value="$(arg output_file_ext)" />
  <param name="robot_calibration_output_directory" type="str" value="$(arg dollar)$(arg robot_package_path)/$(arg calibration_output_directory)/" />


  <!-- launch robot code node -->
  <group if="$(arg robot_utility_launch)">
    <node pkg="robot_code" type="robot_code_node" name="robot_positioning_utility" 
    output="screen" launch-prefix="xterm -e">
    </node>
  </group>

</launch>
