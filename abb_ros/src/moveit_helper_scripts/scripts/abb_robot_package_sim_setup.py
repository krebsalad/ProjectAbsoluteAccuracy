#!/usr/bin/env python

import os
import subprocess
import re
import sys
import glob
import getpass


# error messages
log = []

def print_log():
    print("\n robot package simulation setup Script Log and Error list:")
    if not log:
        print("No entries in script log found.")
    else:
        count = 0
        for entry in log:
            count += 1
            
            print("\n"+str(count)+") "+entry)

def print_help():
    print("\nThis script will only work if your package was generated using urdfMaker.py. You MUST run this script with a path to your package folder")
    print("\ntype the path of the robot package right after the script name. The script is reusable on the same package or different package in same project as long as the package was generated with urdfMaker.py")

def create_directory_if_not_existing(dir_path):
    if not (os.path.exists(dir_path)):
        subprocess.call(["mkdir", "-p", dir_path])
    else:
        log.append("did not create directory "+dir_path+", because already existing")

# copy file/dir to dir
def copy_dir_to_dir(dir_path1, dir_path2):
    if (os.path.exists(dir_path1)):
        if (os.path.exists(dir_path2)):
            subprocess.call(["cp", "-r", dir_path1, dir_path2])
        else:
            log.append(dir_path2 + "not existing!!")
    else:
        log.append(dir_path1 + "not existing!!")

# get parameter with path to config
if(len(sys.argv) == 1):
    print("\nFAILED: no path given")
    print_help()
    exit()

config_file = sys.argv[1] + "sim_setup_config.txt"

if not (os.path.exists(config_file)):
    print("\nFAILED: could not find config file in directory:"+config_file+"\n Note: end your path with a '/'")
    print_help()
    exit()


# default params
project_name = "catkin_ws"
package_name = "abb_irbxxx_moveit_config"
robot_name = "irbxxx"
abb_meta_package = "abb_experimental"
support_package = "abb_irbxxx_support"
specific_robot_ext = "irbxxx_x_x"

# read configuration file
with open(config_file, 'r') as f:
    for line in f:
        line = str.format(line)
        line = re.sub("\n", "", line)
        if(re.match("project_name=", line)):
            project_name = re.sub("project_name=", "", line)
        if(re.match("package_name=", line)):
            package_name = re.sub("package_name=", "", line)
        if(re.match("robot_name=", line)):
            robot_name = re.sub("robot_name=", "", line)
        if(re.match("abb_meta_package=", line)):
            abb_meta_package = re.sub("abb_meta_package=", "", line)
        if(re.match("support_package=", line)):
            support_package = re.sub("support_package=", "", line)
        if(re.match("specific_robot_name=", line)):
            specific_robot_ext = re.sub("specific_robot_name=", "", line)
    f.close()

# paths
pth_base = "/home/"+getpass.getuser()+"/"
pth_project_workspace = pth_base+project_name+'/'
pth_project_packages = pth_project_workspace+"src/"
pth_pkg_config = pth_project_packages+package_name+"/"
pth_ros_downloads = pth_base + "ROS_Downloads/"
pth_pkg_support = pth_project_packages+support_package+"/"

# add industrial package to source and build
if not (os.path.exists(pth_project_workspace+"/src/abb_driver")):
    subprocess.call(["cp", "-r", pth_ros_downloads+'abb/abb_driver', pth_project_packages])
    subprocess.call(["sudo","cp", "-r", pth_ros_downloads+'/industrial_core/.', pth_project_packages])
else:
    log.append("Did not move packages abb_driver and industrial_core/... to project source folder because already existing, if you want to redo this delete abb_driver package")

# remove dependecy tags generated by moveit setup assistant
with open(pth_pkg_config+"package.xml") as f:
    temp = open(pth_pkg_config+"package_temp.xml", "w+")
    for line in f:
        line = re.sub("<build_depend>"+package_name+"</build_depend>", "", line)
        line = re.sub("<run_depend>"+package_name+"</run_depend>", "", line)
        temp.write(line)

    temp.close()
    f.close()
    subprocess.call(["cp", pth_pkg_config+"package_temp.xml", pth_pkg_config+"package.xml"])
    subprocess.call(["rm", pth_pkg_config+"package_temp.xml"])

# create moveit planning execution
if not (os.path.exists(pth_pkg_config+"/launch/moveit_planning_execution.launch")):
    with open(pth_ros_downloads+"abb/abb_irb2400_moveit_config/launch/moveit_planning_execution.launch") as f:
        temp = open(pth_pkg_config+"/launch/moveit_planning_execution.launch", "w+")
        for line in f:
            line = re.sub("abb_irb2400_support", support_package, line)
            line = re.sub("abb_irb2400_moveit_config", package_name, line)
            line = re.sub("joint_names_irb2400", "joint_names_"+specific_robot_ext, line)
            line = re.sub("robot_interface_download_irb2400", "robot_interface_download_"+specific_robot_ext+"", line)
            temp.write(line)

        temp.close()
        f.close()
        log.append("Added moveit_planning_execution in package launch directory because not existing")

# add controller config
if not (os.path.exists(pth_pkg_config+"/config/controllers.yaml")):
    subprocess.call(["cp", pth_ros_downloads+"abb/abb_irb2400_moveit_config/config/controllers.yaml", pth_pkg_config+"/config/"])
    log.append("Added controllers configuration in package config directory")

# add controller manager even if existing because is often empty
with open(pth_ros_downloads+"abb/abb_irb2400_moveit_config/launch/abb_irb2400_moveit_controller_manager.launch.xml") as f:
    temp = open(pth_pkg_config+"/launch/"+specific_robot_ext+"_moveit_controller_manager.launch.xml", "w+")
    for line in f:
        line = re.sub("abb_irb2400_moveit_config", package_name, line)
        temp.write(line)

    temp.close()
    f.close()
    log.append("Added/Replaced controller manager in package launch directory")

# edit trajectory execution
with open(pth_pkg_config+"/launch/trajectory_execution.launch.xml") as f:
    temp = open(pth_pkg_config+"/launch/trajectory_execution.launch.xml.temp", "w+")
    for line in f:
        line = re.sub('<arg name="moveit_controller_manager".*?>', '<arg name="moveit_controller_manager" default="'+specific_robot_ext+'" />', line)
        temp.write(line)

    temp.close()
    f.close()
    log.append("Added/Replaced controller manager in package launch directory")
    subprocess.call(["mv", pth_pkg_config+"/launch/trajectory_execution.launch.xml.temp", pth_pkg_config+"/launch/trajectory_execution.launch.xml"])

# build
subprocess.call(["catkin_make"], shell=True, cwd=pth_project_workspace)

print_log()
("\n---Info---")
print("\n 1. You should now be able to run your moveit configuration on a actual robot using moveit_planning_execution.launch. Try command(options between < >): roslaunch "+package_name+" moveit_planning_execution.launch sim:=<false/true> robot_ip:=<ros_socket_ip on robot if sim was true>")
print("\n 2. you can use moveit_setup_assistant to make changes of a moveit configuration package(for example :"+package_name+" package), just remember to rerun this script on that package after making changes to it with setup assistant")
exit()